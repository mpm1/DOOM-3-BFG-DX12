#include "raytracing_global.inc"

// Raytracing output to texture, accessed as UAV
RWTexture2D<float4> gOutput :register(u0);

// Raytracing acceleration structure, accessed as a SRV
RaytracingAccelerationStructure SceneBVH :register(t0);

[shader("raygeneration")]
void RayGen() {
	// Initialize the ray payload
	HitInfo payload;
	payload.diffuse = float3(0.0f, 1.0f, 0.0f);
	payload.indirect = float3(0.0f, 0.0f, 0.0f);
	payload.specular = float3(0.0f, 0.0f, 0.0f);

	// Get the location within the dispatched 2D grid of work items
	// (often maps to pixels, so this could represent a pixel coordinate).
	uint2 launchIndex = DispatchRaysIndex();
	float2 dims = float2(DispatchRaysDimensions().xy);
	float2 d = (((launchIndex.xy + 0.5f) / dims.xy) * 2.f - 1.f);

	// Define a ray, consisting of origin, direction, and the min-max distance values
	RayDesc ray;
	ray.Origin = float3(d.x, -d.y, 1);
	ray.Direction = float3(0, 0, -1);
	ray.TMin = 0;
	ray.TMax = 100000;

	TraceRay(
		SceneBVH,
		RAY_FLAG_NONE,
		0xFF,
		0.0,
		0, // Hit Shader
		0, // Miss Shader
		ray,
		payload
		);

	gOutput[launchIndex].rgb = payload.diffuse;
	gOutput[launchIndex].a = 1.0f;
}