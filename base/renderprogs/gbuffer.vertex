/*
Used for storing render data into a gbuffer which can be used later to calcuate what is needed for raytraced lighting.
*/

#include "global.inc"

struct VS_IN {
	float4 position : POSITION;
	float2 texcoord : TEXCOORD0;
	float4 normal : NORMAL;
	float4 tangent : TANGENT;
	float4 color : COLOR0;
};

struct VS_OUT {
	float4 position		: SV_POSITION;
	float4 texcoord0	: TEXCOORD0;
	float4 texcoord1	: TEXCOORD1;
	float4 texcoord2	: TEXCOORD2;
	float4 texcoord3	: TEXCOORD3;
	float4 texcoord4	: TEXCOORD4;
	float4 texcoord5	: TEXCOORD5;
	float4 texcoord6	: TEXCOORD6;
	float4 color		: COLOR0;
};

void main( VS_IN vertex, out VS_OUT result ) {

	float3 vNormal = vertex.normal.xyz * 2.0 - 1.0;
	float4 vTangent = vertex.tangent * 2.0 - 1.0;
	float3 vBinormal = cross( vNormal.xyz, vTangent.xyz ) * vTangent.w;

	result.position.x = dot4( vertex.position, sceneConstants.rpMVPmatrixX );
	result.position.y = dot4( vertex.position, sceneConstants.rpMVPmatrixY );
	result.position.z = dot4( vertex.position, sceneConstants.rpMVPmatrixZ );
	result.position.w = dot4( vertex.position, sceneConstants.rpMVPmatrixW );

	float4 defaultTexCoord = float4( 0.0f, 0.5f, 0.0f, 1.0f );

	//calculate vector to light in R0
	float4 toLight = sceneConstants.rpLocalLightOrigin - vertex.position;

	//result.texcoord0
	result.texcoord0.x = dot3( vTangent.xyz, toLight );
	result.texcoord0.y = dot3( vBinormal, toLight );
	result.texcoord0.z = dot3( vNormal, toLight );
	result.texcoord0.w = 1.0f;

	//textures 1 takes the base coordinates by the texture matrix
	result.texcoord1 = defaultTexCoord;
	result.texcoord1.x = dot4( vertex.texcoord.xy, sceneConstants.rpBumpMatrixS );
	result.texcoord1.y = dot4( vertex.texcoord.xy, sceneConstants.rpBumpMatrixT );

	//# texture 2 has one texgen
	result.texcoord2 = defaultTexCoord;
	result.texcoord2.x = dot4( vertex.position, sceneConstants.rpLightFalloffS );

	//# texture 3 has three texgens
	result.texcoord3.x = dot4( vertex.position, sceneConstants.rpLightProjectionS );
	result.texcoord3.y = dot4( vertex.position, sceneConstants.rpLightProjectionT );
	result.texcoord3.z = 0.0f;
	result.texcoord3.w = dot4( vertex.position, sceneConstants.rpLightProjectionQ );

	//# textures 4 takes the base coordinates by the texture matrix
	result.texcoord4 = defaultTexCoord;
	result.texcoord4.x = dot4( vertex.texcoord.xy, sceneConstants.rpDiffuseMatrixS );
	result.texcoord4.y = dot4( vertex.texcoord.xy, sceneConstants.rpDiffuseMatrixT );

	//# textures 5 takes the base coordinates by the texture matrix
	result.texcoord5 = defaultTexCoord;
	result.texcoord5.x = dot4( vertex.texcoord.xy, sceneConstants.rpSpecularMatrixS );
	result.texcoord5.y = dot4( vertex.texcoord.xy, sceneConstants.rpSpecularMatrixT );

	//# texture 6's texcoords will be the halfangle in texture space

	//# calculate normalized vector to light in R0
	toLight = normalize( toLight );

	//# calculate normalized vector to viewer in R1
	float4 toView = normalize( sceneConstants.rpLocalViewOrigin - vertex.position );
	
	//# add together to become the half angle vector in object space (non-normalized)
	float4 halfAngleVector = toLight + toView;

	//# put into texture space
	result.texcoord6.x = dot3( vTangent.xyz, halfAngleVector );
	result.texcoord6.y = dot3( vBinormal, halfAngleVector );
	result.texcoord6.z = dot3( vNormal, halfAngleVector );
	result.texcoord6.w = 1.0f;

	//# generate the vertex color, which can be 1.0, color, or 1.0 - color
	//# for 1.0 : env[16] = 0, env[17] = 1
	//# for color : env[16] = 1, env[17] = 0
	//# for 1.0-color : env[16] = -1, env[17] = 1	
	result.color = ( swizzleColor( vertex.color ) * sceneConstants.rpVertexColorModulate ) + sceneConstants.rpVertexColorAdd;
}